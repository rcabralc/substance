<%
  require_relative "#{name.downcase}"
  scheme = Substance.const_get(name)
  palette = scheme.public_send(variant)
  color = -> (name, alpha = 1) do
   a = format('%x', alpha * 255.0) if alpha != 1
   "rgb#{a && 'a'}:#{palette.public_send(name).srgb.hex.tr('#', '')}#{a}"
  end
%># Kakoune <%= name %> <%= variant %> color scheme

declare-option str color_active <%= color[:active] %>
declare-option str color_active_container <%= color[:active_container] %>
declare-option str color_attribute <%= color[:attribute] %>
declare-option str color_error <%= color[:error] %>
declare-option str color_error_container <%= color[:error_container] %>
declare-option str color_function <%= color[:function] %>
declare-option str color_highlight_container_transparent <%= color[:highlight_container, 0.5] %>
declare-option str color_highlight_container <%= color[:highlight_container] %>
declare-option str color_keyword <%= color[:keyword] %>
declare-option str color_link <%= color[:link] %>
declare-option str color_meta <%= color[:meta] %>
declare-option str color_positive <%= color[:positive] %>
declare-option str color_positive_container <%= color[:positive_container] %>
declare-option str color_secondary_selection <%= color[:secondary_selection] %>
declare-option str color_secondary_selection_container_transparent <%= color[:secondary_selection_container, 0.5] %>
declare-option str color_secondary_selection_container <%= color[:secondary_selection_container] %>
declare-option str color_selection <%= color[:selection] %>
declare-option str color_selection_container_transparent <%= color[:selection_container, 0.5] %>
declare-option str color_selection_container <%= color[:selection_container] %>
declare-option str color_string <%= color[:string] %>
declare-option str color_type <%= color[:type] %>
declare-option str color_value <%= color[:value] %>
declare-option str color_variable <%= color[:variable] %>
declare-option str color_warning <%= color[:warning] %>
declare-option str color_warning_container <%= color[:warning_container] %>

declare-option str color_on_surface <%= color[:on_surface] %>
declare-option str color_on_surface_intense <%= color[:on_surface_intense] %>
declare-option str color_on_surface_mild <%= color[:on_surface_mild] %>
declare-option str color_outline <%= color[:outline] %>
declare-option str color_outline_mild <%= color[:outline_mild] %>
declare-option str color_surface <%= color[:surface] %>
declare-option str color_surface_container <%= color[:surface_container] %>
declare-option str color_surface_container_high <%= color[:surface_container_high] %>
declare-option str color_surface_container_highest <%= color[:surface_container_highest] %>
declare-option str color_surface_container_low <%= color[:surface_container_low] %>
declare-option str color_surface_container_lowest <%= color[:surface_container_lowest] %>
declare-option str color_tier1 <%= color[:tier1] %>
declare-option str color_tier1_container <%= color[:tier1_container] %>
declare-option str color_tier2 <%= color[:tier2] %>
declare-option str color_tier2_container <%= color[:tier2_container] %>
declare-option str color_tier3 <%= color[:tier3] %>
declare-option str color_tier3_container <%= color[:tier3_container] %>
declare-option str color_tier4 <%= color[:tier4] %>
declare-option str color_tier4_container <%= color[:tier4_container] %>
declare-option str color_tier5 <%= color[:tier5] %>
declare-option str color_tier5_container <%= color[:tier5_container] %>
declare-option str color_tier6 <%= color[:tier6] %>
declare-option str color_tier6_container <%= color[:tier6_container] %>

# For code
face global value %opt{color_value}
face global type %opt{color_type}
face global variable %opt{color_variable}
face global module %opt{color_type}
face global function %opt{color_function}
face global string %opt{color_string}
face global keyword "%opt{color_keyword}+b"
face global operator %opt{color_keyword}
face global attribute %opt{color_attribute}
face global comment "%opt{color_on_surface_mild}+i"
face global documentation comment
face global meta %opt{color_meta}
face global builtin "%opt{color_keyword}+i"

# For markup
face global title "%opt{color_keyword}+b"
face global header %opt{color_keyword}
face global mono %opt{color_type}
face global block %opt{color_type}
face global link "%opt{color_link}+u"
face global bullet %opt{color_meta}
face global list %opt{color_value}

# built-in faces
face global Default "%opt{color_on_surface},%opt{color_surface}"
face global PrimarySelection "default,%opt{color_selection_container_transparent}"
face global SecondarySelection "default,%opt{color_secondary_selection_container_transparent}"
face global PrimaryCursor +ra
face global SecondaryCursor "%opt{color_surface},%opt{color_outline_mild}"
face global PrimaryCursorEol "default,%opt{color_selection}"
face global SecondaryCursorEol "default,%opt{color_secondary_selection}"
face global MenuForeground "%opt{color_on_surface_intense},%opt{color_selection_container}"
face global MenuBackground "%opt{color_on_surface},%opt{color_surface_container_highest}"
face global MenuInfo %opt{color_on_surface}
face global Information "%opt{color_on_surface},%opt{color_surface_container_high}"
face global Error "%opt{color_on_surface_intense},%opt{color_error_container}"
face global DiagnosticError "%opt{color_error}+b"
face global DiagnosticHint default
face global DiagnosticInfo %opt{color_on_surface_mild}
face global DiagnosticWarning %opt{color_warning}
face global StatusLine "%opt{color_on_surface},%opt{color_surface_container_lowest}"
face global StatusLineMode %opt{color_tier3}
face global StatusLineInfo %opt{color_tier2}
face global StatusLineValue %opt{color_tier1}
face global StatusCursor +r
face global Prompt %opt{color_tier3}
face global BufferPadding %opt{color_surface_container_lowest}

# built-in highlighter faces
face global LineNumbers "%opt{color_outline_mild},%opt{color_surface_container_lowest}"
face global LineNumberCursor "%opt{color_selection}@LineNumbers"
face global LineNumbersWrapped "%opt{color_surface_container_lowest},%opt{color_surface_container_lowest}+i"
face global MatchingChar "default,%opt{color_tier4_container}+b"
face global Whitespace "%opt{color_outline_mild}+f"
face global WrapMarker "%opt{color_outline_mild}+f"

# other useful highlighter faces
face global CursorLine ",%opt{color_surface_container}"
face global Divider ",%opt{color_surface_container_low}"
face global Search ",%opt{color_highlight_container_transparent}"

# Tree-sitter (https://git.sr.ht/~hadronized/kak-tree-sitter)
face global ts_attribute attribute
face global ts_comment comment
face global ts_conceal %opt{color_outline_mild}
face global ts_constant value
face global ts_constant_builtin meta
face global ts_constant_builtin_boolean meta
face global ts_constant_character string
face global ts_constant_character_escape meta
face global ts_constant_macro type
face global ts_constant_numeric value
face global ts_constructor type
face global ts_diff_plus %opt{color_positive}
face global ts_diff_minus %opt{color_error}
<%# Kakoune uses terminal blue for modified lines in git diff flags. If the user's terminal is using this same colorscheme, this will match term4_mild exactly. %>
face global ts_diff_delta blue
face global ts_error %opt{color_error}
face global ts_function function
face global ts_function_builtin meta
face global ts_function_macro type
face global ts_function_method %opt{color_on_surface}
face global ts_function_special meta
face global ts_hint +c
face global ts_info %opt{color_on_surface_mild}
face global ts_keyword keyword
face global ts_label keyword
face global ts_markup_bold "%opt{color_on_surface_intense}+b"
face global ts_markup_heading keyword
face global ts_markup_italic "%opt{color_on_surface_intense}+i"
face global ts_markup_list list
face global ts_markup_link link
face global ts_markup_quote block
face global ts_markup_raw block
face global ts_markup_strikethrough "%opt{color_outline}+s"
face global ts_namespace module
face global ts_operator operator
face global ts_punctuation %opt{color_outline}
face global ts_punctuation_delimiter keyword
face global ts_punctuation_special meta
face global ts_special meta
face global ts_spell %opt{color_warning}
face global ts_string string
face global ts_string_regex string
face global ts_string_regexp string
face global ts_string_escape meta
face global ts_string_special attribute
face global ts_string_symbol attribute
face global ts_tag type
face global ts_text default
face global ts_text_title title
face global ts_type type
face global ts_variable %opt{color_on_surface}
face global ts_variable_builtin variable
face global ts_variable_other_member variable
face global ts_variable_parameter variable
face global ts_warning %opt{color_warning}

# other general-purpose highlighting groups matching the palette
face global OnSurface %opt{color_on_surface}
face global OnSurfaceIntense %opt{color_on_surface_intense}
face global OnSurfaceMild %opt{color_on_surface_mild}
face global Outline %opt{color_outline}
face global OutlineMild %opt{color_outline_mild}
